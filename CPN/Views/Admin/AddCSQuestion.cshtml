@model CPN.Models.CSJobQuestion

@{
    ViewBag.Title = "Add CS Question";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />

<style>
    .form-wrapper {
        max-width: 700px;
        margin: 0 auto;
        background: #fff;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    h2 {
        text-align: center;
        margin-bottom: 30px;
        font-size: 28px;
        color: #333;
    }

    .form-group label {
        font-weight: 600;
        color: #444;
    }

    .form-control {
        border-radius: 6px;
        padding: 10px;
        border: 1px solid #ccc;
        font-size: 16px;
    }

    .btn {
        padding: 10px 20px;
        font-size: 16px;
        border-radius: 6px;
    }

        .btn i {
            margin-right: 6px;
        }

    .back-link {
        margin-left: 10px;
    }

    .action-buttons {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    /* Error message style */
    #error-message {
        background-color: #f8d7da;
        color: #842029;
        border: 1px solid #f5c2c7;
        padding: 12px 20px;
        border-radius: 6px;
        margin-bottom: 20px;
        display: none;
        font-weight: 600;
        text-align: center;
    }
</style>

<div class="form-wrapper">
    <h2><i class="fas fa-question-circle"></i> Add Question for: @ViewBag.JobTitle</h2>

    <!-- Error message placeholder -->
    <div id="error-message">Options must be unique. Please make sure all options differ.</div>

    @using (Html.BeginForm("AddCSQuestion", "Admin", FormMethod.Post, new { id = "addQuestionForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.JobId)

        <div class="form-group mb-3">
            @Html.LabelFor(m => m.Question)
            @Html.TextAreaFor(m => m.Question, new { @class = "form-control", rows = 3, placeholder = "Enter your question..." })
        </div>

        <div class="form-group mb-3">
            @Html.Label("Option A")
            @Html.TextBoxFor(m => m.OptionA, new { @class = "form-control", placeholder = "Option A", id = "optionA" })
        </div>
        <div class="form-group mb-3">
            @Html.Label("Option B")
            @Html.TextBoxFor(m => m.OptionB, new { @class = "form-control", placeholder = "Option B", id = "optionB" })
        </div>
        <div class="form-group mb-3">
            @Html.Label("Option C")
            @Html.TextBoxFor(m => m.OptionC, new { @class = "form-control", placeholder = "Option C", id = "optionC" })
        </div>
        <div class="form-group mb-3">
            @Html.Label("Option D")
            @Html.TextBoxFor(m => m.OptionD, new { @class = "form-control", placeholder = "Option D", id = "optionD" })
        </div>

        <div class="form-group mb-3">
            @Html.Label("Correct Answer")
            @Html.DropDownListFor(m => m.CorrectAnswer,
                new SelectList(new[] { "A", "B", "C", "D" }),
                "Select Correct Answer",
                new { @class = "form-control" })
        </div>

        <div class="action-buttons">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-save"></i> Save Question
            </button>

            @Html.ActionLink("Back to Questions", "ManageQuestions",
                new { department = "CS", jobId = Model.JobId },
                new { @class = "btn btn-secondary back-link" })
        </div>
    }
</div>

<script>
    document.getElementById('addQuestionForm').addEventListener('submit', function (e) {
        const question = document.getElementById('Question').value.trim();
        const optionA = document.getElementById('optionA').value.trim();
        const optionB = document.getElementById('optionB').value.trim();
        const optionC = document.getElementById('optionC').value.trim();
        const optionD = document.getElementById('optionD').value.trim();
        const correctAnswer = document.getElementById('CorrectAnswer').value;

        const errorDiv = document.getElementById('error-message');

        // Check if all fields are filled
        if (!question || !optionA || !optionB || !optionC || !optionD || !correctAnswer) {
            e.preventDefault();
            errorDiv.innerText = "All fields are required. Please fill in every field.";
            errorDiv.style.display = 'block';
            errorDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
            return;
        }

        // Create array and check duplicates ignoring empty values
        const options = [optionA, optionB, optionC, optionD];
        const uniqueOptions = new Set(options);

        if (uniqueOptions.size !== options.length) {
            e.preventDefault();
            errorDiv.innerText = "Options must be unique. Please make sure all options differ.";
            errorDiv.style.display = 'block';
            errorDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
        } else {
            // Hide error if validation passes
            errorDiv.style.display = 'none';
        }
    });
</script>

